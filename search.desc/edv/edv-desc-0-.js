searchState.loadedDescShard("edv", 0, "EDV - A video editing library.\nAudio processing module for the edv video editor.\nCommon audio processing constants and utilities.\nDefault audio bitrate used for encoding when not specified …\nDefault audio codec used for encoding when not specified.\nDefault audio sample rate (44.1 kHz).\nStandard audio file formats supported for extraction.\nConverts dB value to a linear multiplier.\nValidates if the given audio format is supported.\nConverts linear multiplier to dB value.\nValidates and normalizes an audio level value.\nThe audio file could not be processed due to a codec issue.\nContains the error value\nErrors that can occur during audio processing operations.\nError in underlying <code>FFmpeg</code> operation.\nThe audio file could not be processed due to invalid data.\nInvalid fade duration specified.\nInvalid volume level specified.\nI/O error occurred during file operations.\nThe audio stream was not found in the input file.\nContains the success value\nGeneric audio processing error.\nResult type for audio operations.\nError syncing audio with video.\nThe specified audio track or channel was not found.\nThe specified audio format is not supported.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>InvalidAudioData</code> error.\nCreates a new <code>NoAudioStream</code> error.\nCreates a new <code>TrackNotFound</code> error.\nCreates a new <code>UnsupportedFormat</code> error.\nPath to the file with invalid data.\nPath to the file.\nReason why the data is invalid.\nThe track index that was requested.\nAudio extraction format options.\nSets the audio bitrate.\nThe bitrate for the extracted audio (e.g., “192k”)\nSets the number of audio channels.\nNumber of audio channels (1=mono, 2=stereo)\nSets the audio codec.\nThe audio codec to use for extraction (e.g., “aac”, “…\nSets the extraction duration.\nDuration to extract (in seconds)\nExtracts audio from a video file using the specified …\nExtracts specific audio segments from a video and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLists all audio streams in a video file.\nCreates a new instance with default settings.\nSets whether to normalize audio during extraction.\nNormalize audio during extraction\nSets the audio sample rate.\nThe sample rate for the extracted audio (e.g., 44100)\nSets the extraction start time.\nStart time to extract from (in seconds)\nSets which audio stream to extract.\nWhich audio stream to extract (None = all streams)\nExponential fade (logarithmic amplitude change, sounds …\nFade operation parameters.\nTypes of audio fade effects.\nLinear fade (constant amplitude change)\nLogarithmic fade\nSinusoidal (sine curve-based fade)\nConverts the fade type to a string recognized by <code>FFmpeg</code>.\nSets the audio bitrate for the output.\nThe bitrate for output audio\nSets the audio codec.\nThe audio codec to use for output\nApplies both fade-in and fade-out effects to the audio.\nApplies a fade-in effect to the beginning of the audio.\nApplies a fade-out effect to the end of the audio.\nApplies fade effects to specific segments of the audio.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper function to get the duration of a media file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance with default settings.\nSets whether to preserve the video quality.\nWhether to preserve the video quality (no re-encoding)\nSets the audio sample rate for the output.\nThe sample rate for output audio\nAudio replacement options.\nSets the audio start time for the replacement audio.\nThe audio start time for the replacement audio\nSets the audio volume for the replacement audio.\nThe audio volume for the replacement audio\nSets the audio bitrate for the output.\nThe bitrate for the output audio (e.g., “192k”)\nSets the number of channels for the output audio.\nThe number of channels for the output audio\nSets the audio codec for the output.\nThe audio codec to use for the output\nSets the duration for the replacement audio.\nThe duration for the replacement audio\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets whether to loop the replacement audio to match video …\nLoop the replacement audio to match video duration\nSets whether to ensure audio and video durations match.\nEnsure audio and video durations match\nCreates a new instance with default settings.\nSets whether to normalize the audio.\nWhether to normalize the audio\nSets an offset in seconds for the replacement audio.\nOffset in seconds for the replacement audio\nSets the volume level for the original audio (for mixing).\nMix original audio at this volume level (0.0 = no original …\nReplaces the audio track in a video file with audio from …\nReplaces specific segments of audio in a video with audio …\nReplaces the audio track in a video file with silence.\nSets the audio sample rate for the output.\nThe sample rate for the output audio (e.g., 44100)\nSets the stream index for the replacement audio.\nThe stream index for the replacement audio\nSets the video start time for the replacement audio.\nThe video start time for the replacement audio\nSets the volume adjustment for the replacement audio.\nVolume adjustment for the replacement audio (1.0 = …\nDecibel adjustment (e.g., 6.0 = +6dB)\nLinear multiplier (e.g., 1.5 = 150% volume)\nParameters for a temporal volume adjustment.\nAdjustment method for volume operations.\nAdjusts the volume of all audio tracks in a video file.\nAdjusts the volume of audio within specific time ranges.\nVolume adjustment to apply\nConverts the adjustment to decibels.\nConverts the adjustment to a linear multiplier.\nCreates a new decibel volume adjustment.\nEnd time in seconds (None means until the end)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new linear volume adjustment.\nNormalizes audio volume to a target level.\nStart time in seconds\nCLI application structure.\nTrait that all commands must implement.\nError executing command\nRegistry for managing available commands.\nCore error\nDuplicate command registration\nContains the error value\nError type for CLI operations\nFFmpeg related error\nInvalid argument\nInvalid path\nInvalid time format\nIO error\nMissing argument\nContains the success value\nFormats output for the CLI.\nReports progress of an operation.\nProject error\nRender error\nResult type for CLI operations\nUnknown command\nCLI module for the edv video editing tool.\nWhether to use colors in the output.\nWhether to use colors in the output.\nCommand registry containing all available commands\nMap of command names to command implementations\nApplication configuration\nThe current step.\nGets a human-readable description of the command.\nExecutes the command with the given context and arguments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogger for application messages\nThe message to display.\nGets the name of the command.\nRuns the application with command line arguments.\nThe total number of steps.\nGets usage examples for the command.\nWhether to use verbose output.\nCLI application structure.\nCommand line arguments parser using clap.\nSubcommands supported by the application.\nPlays a video file with a simple GUI player\nDisplays information about a video file\nPlays a video file with optional start and end times\nRedoes the last undone edit in a project\nUndoes the last edit in a project\nRenders a project to a video file\nTrims a video file to the specified start and end times\nSubcommand to execute\nCommand registry containing all available commands\nApplication configuration\nPath to configuration file\nCreates an execution context for command execution.\nExecutes the given command with its arguments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the application, registering all available …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogger for application messages\nCreates a new application instance with the given …\nRegisters all available commands with the command registry.\nRuns the application with command line arguments.\nEnable verbose output\nEnd time in seconds\nEnd time in format HH:MM:SS or seconds\nFrame rate (fps)\nVideo height in pixels\nInput file path\nInput file path\nInput file path\nInput file path\nOutput file path\nOutput file path\nProject file path\nProject file path\nProject file path\nStart time in seconds\nStart time in format HH:MM:SS or seconds\nVideo width in pixels\nExtracts key-value pairs from arguments in the format …\nGets the value following a named argument.\nChecks if a flag is present in the arguments.\nParses an optional argument to the specified type.\nParses a path argument and validates that it exists.\nParses a required argument to the specified type.\nGets a required argument from the arguments list.\nTrait that all commands must implement.\nRegistry for managing available commands.\nDisplay information about a media file.\nPlay a video file.\nRedoes the last undone edit in a project.\nUndoes the last edit in a project.\nRenders a project to a video file.\nCommand for trimming a video file.\nChecks if the given file exists and is readable.\nValidates that the input file exists and is readable.\nGets the number of registered commands.\nGets a list of all command names.\nMap of command names to command implementations\nGets a human-readable description of the command.\nDisplays media information.\nExecutes the command with the given context and arguments.\nExtracts time position from FFmpeg progress output.\nExtracts and validates time position arguments.\nExtract and validate time positions for playing.\nFormats a duration in seconds to a human-readable string.\nFormats a file size into a human-readable string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a command by name.\nChecks if a command with the given name is registered.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets a list of all registered commands.\nGets the name of the command.\nCreates a new, empty command registry.\nCreates a new render command.\nCreates a new info command.\nCreates a new trim command.\nCreates a new project undo command.\nCreates a new project redo command.\nCreates a new play command.\nParses a frame rate string in the format “num/den”.\nRegisters a command with the registry.\nGets usage examples for the command.\nDebug-level information (verbose output).\nError message.\nInformational message.\nFormats output for the CLI.\nRepresents a terminal output level for indicating the …\nA simple progress bar for displaying operation progress.\nReports progress of an operation.\nSuccess message.\nWarning message.\nWhether to use colors in the output.\nWhether to use colors in the output.\nCompletes the progress bar.\nCompletes the progress bar.\nWhether the progress bar has been completed.\nThe current step.\nThe current step number.\nFormats a message as a debug message.\nDraws the progress bar to stdout.\nFormats a message as an error message.\nFormats the progress bar as a string.\nFormats a duration as a human-readable string.\nFormats a message with optional color and styling based on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFormats a message with a header.\nIncrements the current step by one.\nIncrements the progress bar by one step.\nFormats a message as an info message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast update time.\nThe message to display.\nCreates a new output formatter with the specified settings.\nCreates a new progress reporter.\nCreates a new progress bar.\nPrints the progress bar to stderr.\nPrints an error message to stderr.\nPrints a message to stdout with appropriate formatting.\nPrints a success message to stdout.\nPrints a table to stdout with headers and rows of data.\nPrints a warning message to stderr.\nSets the message to display.\nTime when the progress bar was created.\nFormats a message as a success message.\nThe total number of steps.\nThe total number of steps to complete.\nUpdates the progress reporter with a new current step.\nUpdates the progress bar to the specified step.\nThe update interval to avoid excessive redraws.\nWhether to use verbose output.\nFormats a message as a warning message.\nWidth of the progress bar in characters.\nRepresents a time position in a media file, with multiple …\nGets the time position as a Duration.\nGets the time position in seconds.\nCreates a directory if it doesn’t exist.\nEnsures a file name has the specified extension.\nChecks if a file exists and has the expected extension.\nFormats the time position as a string in the format “…\nFormats the time position in a format suitable for FFmpeg.\nReturns the argument unchanged.\nCreates a new time position from hours, minutes, and …\nCreates a new time position from seconds.\nParses a string into a TimePosition.\nGets all media files in a directory with the specified …\nCalls <code>U::from(self)</code>.\nThe time position in seconds.\nGenerates a temporary file path with a unique name.\nApplication configuration\nApplication context\nDebug level - detailed debugging information\nContains the error value\nError type for core operations\nError level - critical errors\nInfo level - general information\nInvalid argument\nInvalid configuration\nIO error\nLog levels for the application\nTrait for logger implementations\nMissing argument\nContains the success value\nResult type for core operations\nWarning level - recoverable issues\nCache directory\nClone the logger\nApplication configuration\nCore functionality for the edv application.\nLogs a debug message\nLogs a debug message\nLogs an error message\nLogs an error message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogs an info message\nLogs an info message\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads default configuration\nLoads configuration from the specified file\nLogs a message at the specified level\nLog level\nLogger for application messages\nCreates a new configuration with default values\nCreates a new application context\nDefault output directory\nLogs a warning message\nLogs a warning message\nSets the cache directory\nSets the log level\nSets the output directory\nSets the working directory\nWorking directory\nConsole logger for terminal output.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCurrent log level\nCreates a new console logger with the specified log level.\nContains the error value\nErrors that can occur in the <code>FFmpeg</code> module.\nError executing <code>FFmpeg</code> command.\nRepresents a detected <code>FFmpeg</code> installation.\nRepresents media format information.\nInvalid argument provided.\n<code>FFmpeg</code> executable path is not valid.\nInvalid time format provided.\nIO error occurred.\nThe minimum supported <code>FFmpeg</code> version.\nRepresents comprehensive media information.\nMissing required argument.\n<code>FFmpeg</code> executable not found.\nContains the success value\nError parsing <code>FFmpeg</code> output.\n<code>FFmpeg</code> process terminated with non-zero exit code.\nResult type for <code>FFmpeg</code> operations.\nRepresents a media stream (video, audio, subtitle, etc.).\n<code>FFmpeg</code> version is not supported.\nRepresents an <code>FFmpeg</code> version.\nGets the audio streams.\nGets the bit rate in bits per second.\nThe bit rate in bits per second.\nThe bit rate (for audio/video streams).\nThe channel layout (for audio streams).\nThe number of channels (for audio streams).\nThe codec long name.\nThe codec name.\nThe codec type (video, audio, subtitle, etc.).\nCreates a new FFmpeg command with this FFmpeg instance.\nDetects any installed FFmpeg executable.\nDetects <code>FFmpeg</code> installation from a specified path.\nDetects <code>FFmpeg</code> in common installation locations.\nDetects <code>FFmpeg</code> in the system PATH.\nThe duration in seconds.\nGets the duration in seconds.\nThe filename.\nInformation about the format (container).\nThe format long name.\nThe format name.\nThe frame rate (for video streams).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a version string into a <code>Version</code> object.\nGets common installation locations for <code>FFmpeg</code>.\nGets information about a media file.\nThe height (for video streams).\nThe index of the stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMajor version number.\nMinor version number.\nThe number of programs.\nThe number of streams.\nCreates a new version from components.\nCreates a new <code>FFmpeg</code> instance.\nParses the <code>FFmpeg</code> version from command output.\nParses the <code>FFmpeg</code> version from version output.\nPatch version number.\nGets the path to the <code>FFmpeg</code> executable.\nThe path to the <code>FFmpeg</code> executable.\nThe pixel format (for video streams).\nThe probe score (higher is better).\nThe sample rate (for audio streams).\nThe size in bytes.\nThe start time in seconds.\nInformation about the streams (video, audio, subtitle, …\nGets the subtitle streams.\nAdditional tags.\nAdditional tags.\nValidates that the <code>FFmpeg</code> installation is compatible.\nGets the <code>FFmpeg</code> version.\nThe <code>FFmpeg</code> version.\nGets the video streams.\nThe width (for video streams).\nThe actual <code>FFmpeg</code> version detected.\nThe exit code of the process, if available.\nThe error message.\nThe minimum required <code>FFmpeg</code> version.\nRepresents an <code>FFmpeg</code> command.\nAdds an input file to the command.\nAdds an input option to be applied before an input file.\nAdds an output option to be applied before the output file.\nExecutes the <code>FFmpeg</code> command.\nExecutes the FFmpeg command with progress callback.\nThe <code>FFmpeg</code> instance to use.\nSets a filter complex for the command.\nFilter complex to apply (if any).\nReturns the argument unchanged.\nAdds an input file to the command.\nAdds input options to be applied before an input file.\nInput options to apply before specifying inputs.\nInput files for the command.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FFmpeg</code> command.\nOutput file for the command.\nAdds output options to be applied before the output file.\nOutput options to apply before specifying output.\nSets whether to overwrite the output file if it exists.\nWhether to overwrite output file if it exists.\nSets the output file for the command.\nContains the error value\nError type for <code>FFmpeg</code> operations.\n<code>FFmpeg</code> error output.\nIO error.\nMissing input file specification.\nMissing output file specification.\n<code>FFmpeg</code> executable not found.\nContains the success value\nError parsing <code>FFmpeg</code> output.\nProcess execution error.\nResult type for <code>FFmpeg</code> operations.\n<code>FFmpeg</code> process timeout.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCommand to play videos with a simple GUI player.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new GUI play command.\nA simple frame-based video player that uses FFmpeg to …\nExtracts frames from the input video file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoads a frame as an SDL2 texture\nCreates a new FramePlayer instance\nPlays the video file\nSets the frame rate\nSets the frame size\nSets the player title\nProcessing functionality.\nAsset ID for resources used in projects.\nAsset metadata.\nAsset not found.\nAsset reference with path and metadata.\nClip ID for timeline clips.\nContains the error value\nFile I/O error.\nContains the success value\nA video editing project.\nError types specific to project operations.\nUnique identifier for a project.\nMetadata for a project.\nRendering error.\nType alias for project operation results.\nSerialization error.\nTimeline error.\nAdds an asset to the project.\nReturns a reference to the UUID.\nReturns a reference to the UUID.\nType of asset (e.g., “video”, “audio”, “image”…\nAssets used in the project.\nCreation timestamp.\nProject description.\nDimensions of the asset (width, height).\nDuration of the asset.\nAdditional metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a project ID from a string.\nGets an asset by its ID.\nGets a mutable reference to an asset by its ID.\nID of the asset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a project from a file.\nMetadata for the asset.\nAdditional metadata.\nLast modification timestamp.\nName of the project.\nName of the project.\nCreates a new random asset ID.\nCreates a new random clip ID.\nCreates a new random project ID.\nCreates new project metadata with the given name.\nCreates a new project with the given name.\nOptimizes the project timeline for complex timelines.\nPath to the asset file.\nLoads and prepares assets for faster rendering.\nProject metadata\nRemoves an asset from the project.\nRenders the project to a video file using default settings.\nRenders the project with the provided rendering …\nRendering module for video composition and processing.\nSaves the project to a file.\nTags associated with the project.\nTimeline of the project.\nUpdates the modification timestamp to the current time.\nRendering functionality for projects.\nCache entry for a rendered asset.\nHash key for cache entries.\nMetadata for a cached asset.\nManages the rendering cache.\nAdds a rendered asset to the cache.\nAsset ID for the source asset.\nRoot directory for cache files.\nClears all cached assets.\nWhen the cached file was created.\nGets the current size of the cache in bytes.\nCurrent size of the cache in bytes.\nDuration of the cached content.\nWhether the cache is enabled.\nCache entries, indexed by cache key.\nSize of the cached file in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a cached asset if available.\nCalculates a hash for rendering parameters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvalidates a cached asset.\nChecks if the cache is enabled.\nLoads existing cache entries from the cache directory.\nGenerates a cache key for an asset and rendering …\nGets the maximum size of the cache in bytes.\nMaximum size of the cache in bytes.\nMetadata for the cached file.\nCreates a new render cache with the specified cache …\nHash of the rendering parameters.\nRendering parameters hash.\nPath to the cached file.\nPrunes the cache if it’s larger than the maximum size.\nSaves the cache metadata to disk.\nEnables or disables the cache.\nSource asset ID.\nAdditive blending (brightness is added)\nError accessing asset files.\nTypes of blend modes. Specifies how video tracks are …\nColor burn blending (darker areas are emphasized)\nColor dodge blending (brighter areas are emphasized)\nError types for composition operations.\nDifference blending (color differences are emphasized)\nContains the error value\nExclusion blending (soft version of difference)\nFFmpeg error during composition.\nSimple FFmpeg command builder for composition\nHard light blending (strong light effect)\nIncompatible track kinds in composition.\nIntermediate file created during the composition process.\nError creating intermediate files.\nMissing asset for a clip.\nMultiply blending (darker pixels are emphasized)\nNormal overlay (standard alpha blending)\nContains the success value\nOverlay blending (contrast is emphasized)\nRepresents a track prepared for composition.\nType alias for composition operation results.\nScreen blending (brighter pixels are emphasized)\nSoft light blending (soft light effect)\nManages the composition of multiple tracks for rendering.\nTemporary directory containing the file.\nAdds an argument with a value to the command\nAdds a complex filter to the command\nAdds an input file to the command\nAdditional arguments for the command\nAvailable assets for the composition.\nCalculates the duration of the timeline.\nClips in the track.\nComposes the timeline into a video file.\nComposite the prepared tracks together.\nDuration of the track.\nIntermediate file for the rendered track.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates an FFmpeg filter graph for multi-track audio …\nGenerates an FFmpeg filter graph for multi-track video …\nGets the asset with the given ID.\nGets the blend mode for a specific track.\nGets the volume level for a specific track.\nGPU accelerator for hardware-accelerated rendering.\nID of the original track.\nInput files for the command\nIntermediate files created during composition.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the composition has been cancelled.\nKind of track (video, audio, etc.).\nCreates a new FFmpeg command\nCreates a new intermediate file with the given suffix.\nCreates a new track compositor.\nWhether to optimize for complex timelines.\nOutput path\nGets the path to the intermediate file.\nPath to the intermediate file.\nPrepares an audio track from clip data.\n…\nPrepares a subtitle track from clip data.\n並列処理用の字幕トラック準備メソッド\nPrepares tracks for composition.\nPrepares a video track from clip data.\n並列処理用のビデオトラック準備メソッド\nProgress tracker for the composition.\nRuns the FFmpeg command\nSets the audio codec for the command\nSets the frame rate for the command\nSets the GPU accelerator to use for rendering.\nSets whether to optimize for complex timelines.\nSets the output file for the command\nSets the progress tracker for the composition.\nSets the video codec for the command\nSets the video size for the command\nThe timeline being composited.\nUpdates the composition progress.\nAAC codec\nAV1 codec\nAMD GPU acceleration (AMF)\nAudio codec types supported by the renderer.\nAuto-detect the best available hardware acceleration\nCopy video stream without re-encoding\nCopy audio stream without re-encoding\nDirectX Video Acceleration (for Windows)\nGIF format (video only, no audio).\nH.264/AVC codec\nH.265/HEVC codec\nHardware acceleration types supported by the renderer.\nIntel Quick Sync acceleration\nMKV container format.\nMOV container format.\nMP3 codec\nMP4 container format (default).\nNo hardware acceleration, use CPU only\nNVIDIA GPU acceleration (NVENC/NVDEC)\nOpus codec\nOutput format options for rendering.\nConfiguration for timeline rendering.\nVP9 codec\nVideo Acceleration API (for Linux)\nVideo codec types supported by the renderer.\nVideo Toolbox (for macOS)\nVorbis codec\nWebM container format.\nAudio codec to use.\nAudio quality (1-100, higher is better).\nWhether to auto-load assets on project load.\nCache directory (if None, uses the default cache …\nDetects available hardware acceleration methods on the …\nEnd position for rendering (default: end of timeline).\nGets the file extension for this format.\nOutput container format.\nVideo frame rate (frames per second).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the appropriate encoder name for this hardware …\nHardware acceleration type to use.\nVideo resolution height (in pixels).\nWhether to include subtitles in the output.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum cache size in bytes (if None, no limit).\nMaximum GPU memory usage in bytes (if None, no limit).\nCreates a new render configuration with default settings.\nWhether to optimize rendering for complex timelines.\nOutput file path.\nDetermines whether hardware acceleration should be used …\nStart position for rendering (default: beginning of …\nNumber of render threads to use (default: available CPU …\nConverts the codec to its FFmpeg codec name.\nConverts the codec to its FFmpeg codec name.\nConverts the hardware acceleration type to its FFmpeg …\nWhether to use cached assets when available.\nWhether to use hardware accelerated decoding when …\nValidates the configuration and returns an error if …\nVideo codec to use.\nVideo quality (1-100, higher is better).\nVideo resolution width (in pixels).\nSets the audio codec and quality.\nSets whether to auto-load assets on project load.\nSets whether to use cached assets when available.\nSets the cache directory.\nSets the output container format.\nSets the video frame rate.\nSets the hardware acceleration type to use.\nSets whether to use hardware accelerated decoding.\nSets the maximum cache size in bytes.\nSets the maximum GPU memory usage in bytes.\nSets whether to optimize rendering for complex timelines.\nSets the rendering range.\nSets the video resolution.\nSets whether to include subtitles in the output.\nSets the number of render threads.\nSets the video codec and quality.\nCache error occurred\nRendering cancelled\nComposition error occurred\nInvalid configuration error\nContains the error value\nContains the error value\nFFmpeg error occurred\nFile system error occurred\nIO error occurred\nContains the success value\nContains the success value\nOther rendering error\nProcessing failed\nError types that can occur during rendering operations.\nSimplified result type for rendering operations with no …\nResult type for rendering operations.\nTimeline error occurred\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a GPU accelerator capable of …\nResult of GPU performance benchmarking.\nHardware acceleration type tested.\nApplies GPU acceleration settings to an FFmpeg command.\nAuto-selects the best hardware acceleration type based on …\nAvailable hardware acceleration types.\nPerformance test results for each acceleration type.\nCreate a GPU accelerator configured from the render config.\nTime taken for test decoding (milliseconds).\nWhether GPU acceleration is enabled.\nTime taken for test encoding (milliseconds).\nFFmpeg instance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the currently selected hardware acceleration type.\nGets benchmark results for all tested acceleration types.\nGets appropriate FFmpeg decoder options for …\nGets the appropriate FFmpeg codec name for the current …\nGets appropriate FFmpeg encoder options for …\nCheck if a system has GPU acceleration support.\nInitializes the GPU accelerator with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this acceleration method is available.\nGets whether GPU acceleration is enabled.\nMaximum GPU memory to use (bytes).\nCreates a new GPU accelerator instance.\nPerformance score (higher is better).\nRuns benchmarks on all available hardware acceleration …\nSelects a specific hardware acceleration type.\nThe currently selected acceleration type.\nWhether hardware decoding should be used.\nManages the rendering pipeline for timeline projects.\nResult of a rendering operation.\nAuto-loads assets when the project is loaded.\nWhether the pipeline is currently in auto-loading mode.\nAverage rendering speed (frames per second).\nCache for rendered assets.\nCalculates the duration of the timeline in the project.\nCancels the rendering process.\nRendering configuration.\nDuration of the rendered video.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the result was loaded from cache.\nGets the current rendering progress.\nGets a reference to the GPU accelerator.\nGPU accelerator for hardware-accelerated rendering.\nInitializes the render cache.\nInitializes GPU acceleration for the rendering pipeline.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the rendering process has been cancelled.\nChecks if GPU acceleration is available and enabled.\nCreates a new render pipeline.\nPath to the rendered output file.\nProgress tracker for the rendering process.\nThe project being rendered.\nRenders the project synchronously.\nRenders the project asynchronously.\nRenders a project with the provided configuration.\nRenders a project to the specified output path with …\nTime taken to render.\nSets the progress callback for the rendering process.\nStart time of the rendering process.\nTotal frames rendered.\nRendering cancelled\nRendering complete\nAlternative name for Complete (for API compatibility)\nPost-processing stage\nInitial preparation stage\nProcessing assets stage\nType signature for progress callback functions.\nA progress tracker for rendering operations.\nRepresents the current progress of a rendering operation.\nStages of the rendering process.\nMain rendering stage\nA shared progress tracker for rendering operations.\nCallback function to report progress.\nCancels the rendering operation.\nCancels the rendering process.\nWhether the render has been cancelled.\nWhether rendering has been cancelled\nMarks the rendering as complete.\nCurrent position in the timeline being rendered.\nCurrent stage of rendering.\nGets a string description of the render stage.\nElapsed time since rendering started.\nEstimated time remaining.\nMarks the rendering as failed.\nFrames rendered so far.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current progress state.\nGets the current progress value.\nGets the current rendering stage.\nGets the total number of items.\nIncrements the progress counter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the rendering has been cancelled.\nChecks if rendering has been cancelled.\nTime of the last progress update.\nCreates a new progress tracker.\nCreates a new progress tracker.\nThe current progress state.\nCurrent progress value\nCurrent frame rate of rendering (frames per second).\nSets the callback function for progress updates.\nSets the current rendering stage.\nSets the current rendering stage.\nSets the total number of items to process.\nCurrent rendering stage\nStart time of the rendering operation.\nTotal number of items to process\nTotal duration of the rendering job.\nTotal frames to render.\nUpdates the progress state and calls the callback if set.\nProject serialization and deserialization support.\nCurrent version of the project file format.\nContains the error value\nError when the file format is incompatible.\nTracks are independent with no synchronization …\nError during I/O operations.\nError during JSON serialization or deserialization.\nTracks should be locked for synchronous editing.\nContains the success value\nWrapper for the entire project file.\nMetadata included in the project file.\nType alias for serialization operation results.\nError types for JSON serialization operations.\nSerializable representation of asset metadata.\nSerializable representation of an asset reference.\nSerializable representation of a clip.\nSerializable representation of multi-track manager.\nSerializable representation of a project.\nSerializable representation of project metadata.\nSerializable representation of a timeline.\nSerializable representation of a track.\nSerializable representation of a track relationship.\nError from timeline operations\nOne track affects the timing of another.\nError when the project version is unsupported.\nOne track determines visibility of another.\nトラック関係を安全に追加する補助関数\nID of the asset used in the clip.\nType of the asset.\nAssets used in the project.\nClips in the track.\nConverts a serialized asset reference to an <code>AssetReference</code>.\nConverts a serialized clip to a <code>Clip</code>.\nConverts a serialized project to a <code>Project</code>.\nConverts serialized project metadata to <code>ProjectMetadata</code>.\nConverts a serialized timeline to a <code>Timeline</code>.\nConverts a serialized track to a <code>Track</code> and adds it to the …\nConverts an asset reference to its serializable …\nConverts a <code>Clip</code> to its serializable representation.\nConverts a <code>Project</code> to its serializable representation.\nConverts a <code>Timeline</code> to its serializable representation.\nConverts a <code>Track</code> to its serializable representation.\nCreation timestamp.\nApplication that created the project.\nProject description.\nDeserializes a project from a JSON file.\nConverts a serialized timeline to a <code>Timeline</code>.\nDeserializes a track from its serialized representation …\nDimensions of the asset as [width, height].\nTimeline duration in seconds.\nDuration of the clip.\nDuration of the asset in seconds.\nAdditional metadata as key-value pairs.\nType of the project file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the project.\nUnique identifier for the track.\nUnique identifier for the clip.\nUnique identifier for the asset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the given version is compatible with the current …\nType of the track.\nWhether the track is locked for editing.\nMetadata about the project file.\nProject metadata.\nMetadata for the asset.\nLast modification timestamp.\nWhether the track is muted.\nName of the project.\nName of the track.\nPath to the asset file.\nPosition of the clip in the timeline.\nThe actual project data.\nSerialized track relationships. Maps source track ID to a …\nマルチトラック関係を復元する補助関数\nSerializes a project to JSON and writes it to a file.\nEnd position in the source asset.\nStart position in the source asset.\nTags associated with the project.\nTimeline data.\nMulti-track relationships.\nTracks in the timeline.\nVersion of the project file format.\nAudio track.\nA clip in a timeline track.\nError when a clip is not found.\nError when clips overlap.\nContains the error value\nTimeline has gaps between clips that might cause …\nReferenced asset is missing or invalid.\nError when the operation would result in an invalid state.\nTrack contains invalid configuration.\nUnhandled relationships between tracks.\nError during multi-track operations.\nTimeline has no video tracks, which is needed for visual …\nContains the success value\nTimeline has overlapping clips that might cause rendering …\nType alias for timeline operation results.\nSubtitle track.\nTimeline data structure.\nError types specific to timeline operations.\nA track in a timeline.\nUnique identifier for a track.\nTypes of tracks in a timeline.\nError when a track is not found.\nValidation error\nVideo track.\nAdds a clip to the track.\nAdds a clip to a track.\nAdds a clip to a track and records the action in history.\nAdds a keyframe to a track for a specific property.\nAdds a keyframe to a track for a specific property and …\nAdds a new track to the timeline.\nGets a string representation of the track kind.\nGets the ID of the asset used in the clip.\nID of the asset used in the clip.\nBegins a transaction for grouping multiple edit actions.\nChecks if there are any actions that can be redone.\nChecks if there are any actions that can be undone.\nClips in the track, ordered by position.\nCommits the current transaction.\nCreates a new keyframe animation for this track if none …\nGets the duration of the clip.\nGets the duration of the track.\nGets the duration of the timeline.\nDuration of the clip.\nGets the end position of the clip in the timeline.\nFinds clips that overlap in time within a track.\nFinds the ID of the track containing the specified clip.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to a clip by its ID.\nGets a mutable reference to a clip by its ID.\nGets the clips in the track.\nGets mutable references to all clips in the track.\nGets the animated property value at a specific time.\nGets a reference to a track by its ID.\nGets a mutable reference to a track by its ID.\nGets a reference to all tracks in the timeline.\nChecks if there are gaps between clips in a track.\nChecks if a track with the given ID exists.\nGets a reference to the edit history.\nEdit history.\nGets a mutable reference to the edit history.\nGets the ID of the clip.\nGets the ID of the track.\nUnique identifier for the clip.\nUnique identifier for the track.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets whether the track is locked for editing.\nGets whether the track is muted.\nGets the keyframe animation applied to this track.\nOptional keyframe animation applied to this track\nGets the keyframe animation applied to this track …\nGets the kind of the track.\nType of the track.\nWhether the track is locked for editing.\nMerges two adjacent clips.\nMoves a clip from one track to another.\nMoves a clip to a different track and records the action …\nGets the multi-track manager.\nMulti-track relationship manager.\nGets a mutable reference to the multi-track manager.\nWhether the track is muted.\nGets the name of the track.\nName of the track.\nCreates a new random track ID.\nCreates a new clip.\nCreates a new empty track.\nCreates a new empty timeline.\nChecks if this clip overlaps with another clip.\nGets the position of the clip in the timeline.\nPosition of the clip in the timeline.\nRedoes the last undone edit action.\nRemoves a clip from the track.\nRemoves a clip from a track.\nRemoves a clip from a track and records the action in …\nRemoves a keyframe from a track.\nRemoves a keyframe from a track and records the action in …\nRemoves a track from the timeline.\nRolls back the current transaction.\nSets the duration of the clip.\nSets the keyframe animation for this track.\nSets whether the track is locked for editing.\nSets whether the track is muted.\nSets the name of the track.\nSets the position of the clip in the timeline.\nSets the end position in the source asset.\nSets the start position in the source asset.\nGets the end position in the source asset.\nEnd position in the source asset.\nGets the start position in the source asset.\nStart position in the source asset.\nSplits a clip at the specified position.\nMapping from track ID to index in the tracks vector.\nTracks in the timeline.\nUndoes the last edit action.\nUpdates a keyframe on a track and records the action in …\nValidates the timeline for correctness and completeness.\nAdded a clip to a track.\nAdded a keyframe to a track property.\nAdded an entire keyframe animation to a track.\nAdded a new track.\nFailed to apply action.\nRepresents a single, reversible action performed on the …\nHistory of edit actions with undo/redo support.\nContains the error value\nA group of actions treated as a single unit for undo/redo.\nRepresents a single entry in the edit history.\nError type for history operations.\nType alias for history operation results.\nMoved a clip within a track or between tracks.\nNo transaction is in progress.\nNo action to redo in the history.\nNo action to undo in the history.\nContains the success value\nRemoved a clip from a track.\nRemoved a keyframe from a track property.\nRemoved an entire keyframe animation from a track.\nRemoved a track.\nChanged the duration of a clip (e.g., trimming).\nChanged the position of a clip.\nA single, atomic edit action.\nRepresents a group of actions that should be undone/redone …\nTransaction is already in progress.\nDefines methods for applying and undoing timeline actions.\nUpdated a keyframe on a track property.\nReturns the actions in the group.\nThe sequence of actions within this transaction.\nAdds an action to the transaction group.\nApplies the action to the timeline.\nApplies the specific <code>EditAction</code> variant to the timeline.\nStarts a new transaction.\nChecks if there are any actions that can be redone.\nChecks if there are any actions that can be undone.\nMaximum number of entries to store, if limited.\nClears the entire edit history.\nCommits the current transaction, adding it to the undo …\nCurrent transaction being built, if any.\nReturns the description of the group, if any.\nA descriptive name for the transaction (optional).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new, empty transaction group.\nCreates a new empty edit history.\nReturns a reference to the next action to redo, without …\nReturns a reference to the next action to undo, without …\nPushes a history entry onto the undo stack, managing …\nRecords an action in the history.\nRecords a single edit action.\nRedoes the last undone action or transaction, applying the …\nReturns a reference to the redo stack.\nStack of actions that can be redone.\nRolls back (cancels) the current transaction.\nMoves the top entry from the undo stack to the redo stack.\nMoves the top entry from the redo stack to the undo stack.\nUndoes the action on the timeline.\nUndoes the specific <code>EditAction</code> variant on the timeline.\nUndoes the last action or transaction, applying the …\nReturns a reference to the undo stack.\nStack of actions that can be undone.\n重複するキーフレーム\nイーズイン（徐々に加速）\nイーズインアウト（加速してから減速）\nイーズアウト（徐々に減速）\nイージング関数の種類\nContains the error value\n無効なキーフレーム時間\n…\n…\nキーフレームが見つからない\n1つのキーフレームポイント\n…\n線形補間（デフォルト）\nContains the success value\nその他のエラー\n存在しないプロパティ\nキーフレーム操作の結果\nステップ（値の変化が段階的）\nキーフレームを追加\nキーフレームを追加\nキーフレームトラックを追加\nイージング関数の名前を取得\nキーフレームをすべて削除\nキーフレームアニメーションをクリア\n…\nアニメーションの合計時間を取得\nアニメーションの合計時間\nキーフレームのイージング関数を取得\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n…\nキーフレームトラックを取得\nキーフレームトラックを可変で取得\n特定の時間における値を取得\n特定の時間におけるプロパティの値を取得\n…\n2点間の補間値を計算\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nキーフレームの数を取得\nキーフレームのリストを取得\nキーフレームのリスト（時間順にソート）\n新しいキーフレームポイントを作成\n新しいキーフレームトラックを作成\n新しいキーフレームアニメーションを作成\nプロパティのリストを取得\nプロパティ名を取得\nプロパティ名\nすべてのプロパティ名を取得\nキーフレームを削除\nキーフレームを削除\nプロパティを削除\nアニメーションの合計時間を設定\nキーフレームのイージング関数を設定\nキーフレームの値を設定\nキーフレームの時間位置を取得\nキーフレームの時間位置\nすべてのキーフレームトラックを取得\n…\nキーフレームを更新\nキーフレームの値を取得\nキーフレームの値\nAttempted to create a circular dependency between tracks.\nAttempted to create a relationship that conflicts with …\nContains the error value\nTracks are independent with no synchronization …\nOperation would result in invalid track state.\nTracks should be locked for synchronous editing.\nError types specific to multi-track operations.\nManages relationships and dependencies between multiple …\nContains the success value\nType alias for multi-track operation results.\nOne track affects the timing of another.\nAttempted to create a track relationship with a …\nDefines the relationship between two tracks.\nOne track determines visibility of another.\nAdds a relationship between two tracks.\nAdds a relationship assuming tracks exist and without …\nApplies an edit operation to a track and propagates …\nMaps track IDs to their dependent tracks and relationship …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all relationships between tracks.\nGets all tracks that depend on the specified track.\nGets the relationship between two tracks, if any.\nGets all tracks that the specified track depends on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty <code>MultiTrackManager</code>.\nPropagates edit operations from source to target\nPropagates timing changes from source to target\nPropagates visibility changes from source to target\nRemoves a relationship between two tracks.\nRemoves a track and all its relationships.\nMaps track IDs to tracks that depend on them.\nAutomatically detect encoding (best effort)\nSubtitle processing module.\nLatin-1 encoding (ISO-8859-1, common in older SRT files)\nSettings for subtitle rendering.\nSubtitle processing module.\nRepresents subtitle encoding options.\nUTF-16 encoding (common in some subtitle files)\nUTF-8 encoding\nSets the background color.\nBackground color as #RRGGBB or #RRGGBBAA (empty for …\nSets the font color.\nFont color as #RRGGBB or #RRGGBBAA\nSets the font.\nFont name to use\nSets the font size.\nFont size in points\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance with default settings.\nSets the outline color.\nOutline color as #RRGGBB or #RRGGBBAA\nSets the outline width.\nOutline width in pixels\nSets the vertical position.\nVertical position (0.0 = top, 1.0 = bottom)\nEnables or disables shadow.\nEnable drop shadow\nSets the shadow color.\nShadow color as #RRGGBB or #RRGGBBAA\nSets the shadow offset.\nShadow offset in pixels\nA builder for creating subtitles with time-shifted values.\nProvides editing capabilities for subtitle tracks.\nAdds a new subtitle to the track.\nLimits the shift operation to subtitles that occur after …\nOnly shift subtitles after this time\nApplies the shift operation to a subtitle track.\nLimits the shift operation to subtitles that occur before …\nOnly shift subtitles before this time\nCreates a new subtitle track from scratch.\nPath to the file if loaded from disk\nFixes overlapping subtitles.\nThe format the track should be saved as\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the file path if the track was loaded from a file.\nGets the current subtitle format.\nGets a reference to a subtitle by its ID.\nGets a mutable reference to a subtitle by its ID.\nGets all subtitles in the track.\nGets the subtitle track being edited.\nGets a mutable reference to the subtitle track being …\nOnly shift subtitles with these IDs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the subtitle track has been modified since the …\nLoads a subtitle file into the editor.\nMerges adjacent subtitles that meet specific criteria.\nFlag to track if the subtitle track has been modified\nCreates a new shift operation with the specified amount in …\nCreates a new empty subtitle editor.\nRemoves a subtitle by its ID.\nSaves the current subtitle track to a file.\nSets the subtitle format for saving.\nAmount of time to shift in seconds (positive or negative)\nShifts the timing of all or selected subtitles.\nSorts all subtitles by their start time.\nSplits a subtitle at the specified time.\nThe subtitle track being edited\nUpdates the style of a subtitle.\nUpdates the text of a subtitle.\nUpdates the timing of a subtitle.\nLimits the shift operation to subtitles with the specified …\nError burning subtitles into video.\nError when encoding or decoding subtitles\nContains the error value\nErrors that can occur during subtitle processing …\nError in underlying <code>FFmpeg</code> operation.\nError when working with subtitle formatting\nError when a split point is outside the subtitle’s …\nError when an invalid subtitle format is provided\nError when there’s an invalid time range (start &gt;= end)\nError when an internal I/O operation fails\nError when trying to save a subtitle with no file path …\nContains the success value\nError when parsing subtitle files\nError rendering subtitle.\nResult type for subtitle operations.\nError when working with subtitle timing\nError when subtitle format is unknown\nError when subtitle export is not implemented for a format\nError when subtitle parser is not implemented for a format\nCreates a new <code>BurnError</code>.\nCreates an encoding error with the given message.\nCreates a formatting error with the given message.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates an invalid split point error.\nCreates an invalid subtitle format error.\nCreates an invalid time range error.\nCreates a no file path error.\nCreates a parse error with the given file and reason.\nCreates a parse error with only a reason.\nCreates a new <code>RenderError</code>.\nCreates a timing error with the given message.\nCreates an unknown subtitle format error.\nCreates an unsupported export format error.\nCreates an unsupported parser format error.\nEnd time\nEnd time of the subtitle\nPath to the subtitle file\nThe reason for the parsing failure\nThe time to split at\nStart time\nStart time of the subtitle\nAdvanced <code>SubStation</code> Alpha (.ass, .ssa)\n<code>MicroDVD</code> format (.sub)\n<code>SubRip</code> Text format (.srt)\n<code>SubViewer</code> format (.sub)\nSupported subtitle formats.\nRepresents a time position in a subtitle.\n<code>WebVTT</code> format (.vtt)\nAttempts to detect the subtitle format from file content.\nReturns the file extension for this subtitle format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetects the subtitle format from a file extension.\nCreates a time position from a total number of seconds.\nParses a <code>TimePosition</code> from a string in SRT format.\nParses a <code>TimePosition</code> from a string in VTT format.\nHours component\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a file extension is supported for subtitles.\nMilliseconds component\nReturns the MIME type for this subtitle format.\nMinutes component\nCreates a new time position.\n<code>time_str</code> - Time <code>String</code> in SRT formatReturns\nParses a time position from a <code>String</code> with the specified …\n<code>time_str</code> - Time <code>String</code> in VTT formatReturns\nSeconds component\nConverts the time position to a total number of seconds.\nTime position formatted as a <code>String</code>\nTime position formatted as a <code>String</code>\nRepresents a single subtitle entry with timing and text.\nBuilder for creating subtitles.\nA collection of subtitles.\nAdds a subtitle to the track.\nBuilds the subtitle.\nDuration of the subtitle in seconds (alternative to …\nSets the duration in seconds (alternative to setting end …\nDuration of the subtitle in seconds (alternative to …\nSets the end time.\nSets the end time in seconds.\nEnd time of the subtitle\nEnd time of the subtitle\nFinds overlapping subtitles in the track.\nFormats the entire subtitle track as SRT.\nFormats the entire subtitle track as <code>WebVTT</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the end time of the subtitle.\nGets the ID of the subtitle.\nGets all subtitle IDs in their current order.\nGets the start time of the subtitle.\nGets the style of the subtitle.\nGets a reference to a subtitle by ID.\nGets all subtitle IDs in this track.\nGets a mutable reference to a subtitle by ID.\nGets all subtitles as a slice in order.\nGets subtitles in a specific time range.\nGets mutable references to all subtitles.\nGets the text content of the subtitle.\nSets the subtitle ID.\nUnique identifier for the subtitle\nID of the subtitle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the track is empty.\nReturns the number of subtitles in the track.\nCreates a new subtitle.\nCreates a new empty subtitle track.\nCreates a new subtitle builder.\nOrdered list of subtitle IDs for iteration\nChecks if this subtitle overlaps with another subtitle.\nRemoves a subtitle by ID.\nReplaces a subtitle with the same ID.\nAdjusts the subtitle timing by a scaling factor.\nSets the end time of the subtitle.\nSets the ID of the subtitle.\nSets the start time of the subtitle.\nSets the style of the subtitle.\nSets the text content of the subtitle.\nShifts the subtitle timing by the specified number of …\nShifts all subtitles by the specified number of seconds.\nSorts all subtitles by their start time.\nSets the start time.\nSets the start time in seconds.\nStart time of the subtitle\nStart time of the subtitle\nSets the style information.\nStyle information for the subtitle (optional)\nStyle information for the subtitle\nCollection of subtitles by ID\nSets the text content.\nText content of the subtitle (can contain multiple lines)\nText content of the subtitle\nFormats the subtitle in SRT format.\nFormats the subtitle in <code>WebVTT</code> format.\nSets the subtitle ID.\nSets the subtitle style.\nDetects subtitle format by examining file content.\nParses <code>SRT</code> format subtitle content.\nParses an individual <code>SRT</code> entry.\nParses an <code>SRT</code> subtitle file.\nStub for parsing SSA/ASS format subtitles.\nAttempts to parse a subtitle file.\nStub for parsing <code>SubViewer</code> format subtitles.\nParses a time position from a string with a comma (,) …\nParses <code>WebVTT</code> format subtitle content.\nParses an individual <code>WebVTT</code> entry.\nParses a time string in <code>WebVTT</code> format (00:00:00.000).\nParses a <code>WebVTT</code> subtitle file.\nBold text\nBold and italic text\nBottom-aligned text\nCenter-aligned text\nFont style options for text.\nHorizontal alignment options for subtitle text.\nItalic text\nLeft-aligned text\nMiddle-aligned text\nNormal text\nRight-aligned text\nRepresents the styling for subtitle text.\nTop-aligned text\nVertical alignment options for subtitle text.\nReturns the CSS representation of the font style.\nSets the background color as a hex string (#RRGGBB).\nBackground color as #RRGGBB hex string (empty for …\nClears the custom position, reverting to alignment-based …\nSets the text color as a hex string (#RRGGBB).\nFont color as #RRGGBB hex string\nSets the font family.\nFont family for the text\nSets the font size in pixels.\nFont size in pixels\nSets the font style.\nFont style (normal, italic, bold)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the horizontal alignment.\nHorizontal alignment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new text style with default values.\nSets the outline color as a hex string (#RRGGBB).\nOutline color as #RRGGBB hex string (empty for no outline)\nSets the outline width in pixels.\nOutline width in pixels\nSets a custom position relative to the video frame.\nCustom position relative to the video frame (0.0-1.0 for x …\nConverts the style to a CSS style string.\nConverts the style to a <code>WebVTT</code> cue setting string.\nSets the vertical alignment.\nVertical alignment\nUtility functions and types.\nEnvironment for testing GPU capabilities.\nResult of a GPU capability test.\nThe hardware acceleration type that was tested.\nAdds a benchmark result to this test result.\nCreates a new GPU test result for an available GPU.\nAvailable hardware acceleration types.\nBenchmarks a specific GPU acceleration method.\nBenchmark results for various operations, in milliseconds.\nCreates a test video file for GPU testing.\nDetects details about a specific GPU.\nAny error message encountered during testing.\nFFmpeg instance to use for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a formatted report from GPU test results.\nGets the best performing GPU based on test results.\nGets the test result for a specific hardware acceleration …\nGets all test results.\nThe detected GPU name, if available.\nTests if the system supports hardware acceleration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the GPU is available and working.\nCreates a new GPU test environment.\nEstimated performance score (higher is better).\nTest results for each hardware acceleration type.\nRuns GPU capability tests and generates a report.\nSelects the most appropriate hardware acceleration type …\nSets the performance score for this GPU.\nDetects and tests all available GPU acceleration methods.\nTests a specific GPU acceleration method.\nTests GPU functionality with an actual encoding operation.\nCreates a new GPU test result indicating an unavailable …\nA duration of time.\nA position in time.\nGets the duration in frames at a given frame rate.\nGets the time position in frames at a given frame rate.\nGets the duration in milliseconds.\nGets the time position in milliseconds.\nGets the duration in seconds.\nGets the time position in seconds.\nGets the duration in seconds as f64 (for compatibility …\nGets the whole number of frames at a given frame rate.\nGets the whole number of frames at a given frame rate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new duration from frames at a given frame rate.\nCreates a new time position from frames at a given frame …\nCreates a new duration from milliseconds.\nCreates a new time position from milliseconds.\nCreates a new duration from seconds.\nCreates a new time position from seconds.\nCreates a new time position from a std::time::Duration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a time position from a string.\nDuration in seconds.\nPosition in seconds.\nConverts the time position to a Duration.\nConverts the duration to a timecode string.\nConverts the time position to a timecode string.\nCreates a zero duration.\nCreates a zero time position.")